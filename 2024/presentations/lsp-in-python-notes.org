#+title: LSP Demystified
#+subtitle: How to write an LSP server in Python
#+author: Chahak Mehta
#+category: Developer Experience
#+property: header-args :eval never
#+options: toc:nil reveal_show_notes:nil reveal_center:t reveal_width:1920 reveal_height:1080
#+OPTIONS: reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_klipsify_src:nil
#+OPTIONS: org-reveal-ignore-speaker-notes:t
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%a</h3><h4>(Software Engineer @ Arch.co)</h4>
#+REVEAL_PLUGINS: (notes search zoom)
#+REVEAL_THEME: serif
#+REVEAL_MARGIN: 0.2
#+REVEAL_EXTRA_CSS: ./local.css

#+begin_notes
In this talk I cover how to write a Language Server in Python with the example
of a MySQL Language Server that I wrote.
#+end_notes
* Why Language Server Protocol (LSP)?
+ Let's start with a quick poll.
#+begin_notes
- Take poll: How many in the audience use the following -
  - VSCode
  - JetBrains IDE
  - Vim/Neovim
  - Emacs
  - Others

Most of us use our editors to improve our development experience. A huge part of
this experience is provided by the Lanugage Servers (LS).

Cue: Show images.
#+end_notes

#+REVEAL: split
#+caption: Examples of completion and linting error using =basedpyright= for Python
| [[file:images/lsp_completion_example_2.png]] | [[file:images/lsp_error_example_2.png]] |


#+begin_notes
The first image shows an example of autocomplete while the second image shows an
example of a linting error. These are provided by the =basedpyright= language
server for python.

These autocomplete options allow us to have the documentation for symbols a
keystroke away.

IDEs that provide an integrated experience for particular languages can have
their own framework to provide these insights but this requires implementing
these features for every editor individually.

The Language Server Protocol (LSP) provides us with a unified framework such that
the implementation for these features for a language can be decoupled from the
editor that is being used.
#+end_notes

#+REVEAL: split
#+begin_notes
Language Servers also reduce the complexity required to implement new editing
features for a language.

For example, as can be seen in the first figure, if there were no language
server then implementing, say autocomplete, for Python would require
implementing it separately for each editor.

On the other hand, with Language Servers, one can implement a feature and expose
it via the corresponding Language Server. As long as the editor provides a
complete client for a Language Server, the new feature is automatically
available for each editor now.

Hence, this requires only one unit of work on the lanugage server.
#+end_notes

#+caption: Feature implementation with & without Language Servers
[[file:images/with_without_lsp.png]]
* LSP Specification and JSON-RPC
+ How does this work?
  - A Language Server interacts with a stream of messages
    that follow a structure as defined in the /Language Server Protocol/ (LSP).

    #+caption: Image from LSP Documentation - https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/
    #+attr_html: :width 85%
    [[file:images/language-server-sequence.png]]

  - Each of these messages are structured as [[https://www.jsonrpc.org/specification][JSON-RPC]] messages which forms the
    basis of the Language Server Protocol.

#+REVEAL: split
#+begin_notes
+ The LSP Specification defines a set of /capabilities/ that a server provides
  to act on a document, language, workspace or window.
  - From the image - =textDocument/didOpen=, =textDocument/didChange=,
    =textDocument/publishDiagnostics=, =textDocument/definition= etc.

+ This communication uses the [[https://www.jsonrpc.org/specification][JSON-RPC]] specification.
#+end_notes

Each of these /capabilities/ have a defined specification for the /Request/ and
its accepted /Response/. For example, for =textDocument/definition=

#+begin_src python
@attrs.define
class TextDocumentDefinitionRequest:
    id: Union[int, str] = attrs.field()
    params: DefinitionParams = attrs.field()
    method: str = "textDocument/definition"
    jsonrpc: str = attrs.field(default="2.0")
#+end_src
+ Code 1: =textDocument/definition= request as per https://github.com/microsoft/lsprotocol

\\
#+begin_src python
@attrs.define
class TextDocumentDefinitionResponse:
    id: Optional[Union[int, str]] = attrs.field()
    result: Union[Definition, List[DefinitionLink], None] = attrs.field(default=None)
    jsonrpc: str = attrs.field(default="2.0")
#+end_src
+ Code 2: =textDocument/definition= response as per https://github.com/microsoft/lsprotocol


The client is then responsible to handle this response correctly and go to the
location defined in the response to =textDocument/definition=

#+begin_notes
This is where the language server SDKs are invaluable. For example, [[https://github.com/openlawlibrary/pygls/][=pygls=]] is
a Language Server SDK for Python by =openlawlibrary=. Using this allows us to
focus on the /capabilities/ of our server without having to worry about how to
communicate using JSON-RPC. We will use this library as our foundation for the
rest of the talk.
#+end_notes
* Parsing the code
#+begin_notes
+ Now that we have established a basis of communication, we need the server to
  understand the codebase to be able to respond to our requests. This requires
  parsing the files into an AST. Doing this is largely backed, and hence
  simplified, by the use of language grammars. For example, ~sqlfluff~ provides
  language grammars for different dialects of SQL and provides a parsing and
  lexing ability on top of this grammar.
+ We can use this to parse our query correctly to determine where, logically,
  our cursor is pointing at.
#+end_notes

- The server needs to parse the code to /understand/ it and respond to our requests.
- Most languages have a formal language grammar that can be used to generate an
  Abstract Syntax Tree (AST).
- Example using ~sqlfluff~:
  #+begin_src python
from sqlfluff.core import Lexer, Parser

text = document.source
lexer = Lexer(config=fluff_config)
parser = Parser(config=fluff_config)
parsed_query = parser.parse(lexer.lex(text)[0])
  #+end_src
* Linting code and Publishing diagnostics
#+begin_notes
 + In our case, we use the linting rules that are provided by =sqlfluff=
   since they are quite extensive and we want to focus on the LSP aspect of it.
#+end_notes

- Linting rules can now be applied on the Abstract Syntax Tree that we obtained
  by parsing the code.
- These linting errors can be displayed on the editor as LSP diagnostics using
  the =textDocument/publishDiagnostics= /capability/.

  Code 3: Publish diagnostics capability using pygls
#+begin_src python
def _publish_diagnostics(ls: SqlLanguageServer, uri: str):
    """Publish diagnostics to LSP server."""
    document = ls.workspace.get_text_document(uri)
    lint_diagnostics = sqlfluff.lint(document.source, dialect="mysql", config=fluff_config)
    diagnostics: list[Diagnostic] = [
        Diagnostic(
            range=current_word_range(
                document,
                position=Position(line=x["line_no"] - 1, character=x["line_pos"] - 1),
            ),
            message=x["description"],
            code=x["code"],
        )
        for x in lint_diagnostics
    ]
    ls.publish_diagnostics(uri, diagnostics=diagnostics)
#+end_src

#+attr_html: :center
[[file:images/lsp_sql_lint_error.png]]
#+begin_notes
As you can see, once we have the linting diagnostics from a tool
we massage them into the interface definted by the
Language Server Protocol. Using =pygls= it is as easy as creating an object
of the ~Diagnostic~ class. We can then publish these diagnostics for a
document URI using the method provided =pygls=
#+end_notes

* Smart autocompletion
#+begin_notes
- Having setup parsing and linting provides us the ability to provide smart
  autocomplete suggestions.
- What does "smart" mean?
  - Suggestions that vary by context.
  - For example, in SQL, if you're writing =<table>.= then you would want to see
    all the column names suggested before any other word.
- This can be achieved by deconstructing the syntax tree to understand the
  location of the cursor and making suggestions based on that.
- Autocomplete is probably the most used feature in Language Servers
  since it is used on almost every keystroke.
#+end_notes

- One of the most used feature of Language Servers.
- Allows the server to suggest context-aware completion suggestions.

#+begin_src python
match current_segment.get_parent()[0]:
    case ColumnReferenceSegment():
        curr_seg = segments[segment_id].raw
        prev_seg = segments[segment_id - 1].raw
        if curr_seg == "." or prev_seg == ".":
            alias = segments[segment_id - 1] if curr_seg == "." else segments[segment_id - 2]
            table_name = _get_alias_table_name(alias.raw, parsed_query)
            columns = dbconn.get_columns(table_name=table_name)
        else:
            columns = dbconn.get_columns()
        candidates.extend([
                CompletionItem(
                    label=col.name,
                    kind=CompletionItemKind.Field,
                    detail=col.table_name,
                    documentation=str(col),
                    sort_text="0",
                )
                for col in columns
                if re.match(match_regex, col.name)
            ])
    case TableReferenceSegment():
        tables = dbconn.get_tables()
        candidates.extend([
                CompletionItem(
                    label=table.name,
                    kind=CompletionItemKind.Field,
                    detail=table.type,
                    documentation=table.description,
                    sort_text="1",
                )
                for table in tables
                if re.match(match_regex, table.name)
            ])
#+end_src

* Help text and documentation
+ Another feature of Language Servers that we often use is the ability to see
  documentation or help text while writing code. This can be while looking at
  autocomplete candidates to select the right variable name or while just
  reading the code.
+ For autocomplete, this documentation comes from the =documentation= key set on
  each =CandidateItem=.

  #+begin_src python
candidates.extend(
    [
        CompletionItem(
            label=table.name,
            kind=CompletionItemKind.Field,
            detail=table.type,
            documentation=table.description,
            sort_text="1",
        )
        for table in tables
        if re.match(match_regex, table.name)
    ]
)
  #+end_src

  #+REVEAL: split
+ The =textDocument/hover= /capability/ defined by the LSP
  specification defines the behaviour on hover which is another place where we
  can see the documentation.

#+caption: Example showing documentation for ~override~ on ~hover~
#+attr_html: :width 75%
[[file:images/lsp_hover_example_2.png]]
* Other methods and capabilities
+ These were just a few of the major methods that are defined by the LSP spec.
  There are many other functions like =codeAction=, =formatting= etc. which can
  be used to implement features like -
  - Running the code
  - Formatting the code
  - Organizing imports
    etc.

* Integration with editors
- Very simple changes can be made to make sure LSP clients to ensure the
  language server can correctly communicate with them.
- For example, to enable query execution with =sql-ls= in =eglot=, we can use
  a simple patch:

  #+begin_src diff
    diff --git a/eglot.el b/eglot.el
index f247c43..974e7d8 100644
--- a/eglot.el
+++ b/eglot.el
@@ -3685,7 +3685,15 @@ at point.  With prefix argument, prompt for ACTION-KIND."
                                     (string-prefix-p action-kind (plist-get a :kind)))
                            collect a)))
     (if interactive
-        (eglot--read-execute-code-action actions server action-kind)
+        (let ((serverName (plist-get (eglot--server-info server) :name)))
+          (if (string-equal serverName "sql-ls")
+              (with-current-buffer (get-buffer-create "*sql-ls-eglot results*")
+                (with-help-window (buffer-name)
+                  (erase-buffer)
+                  (insert (eglot--read-execute-code-action actions server action-kind))))
+            (eglot--read-execute-code-action actions server action-kind)))
+
       actions)))

 (defalias 'eglot-code-actions-at-mouse (eglot--mouse-call 'eglot-code-actions)
  #+end_src

#+begin_notes
And that's it. This is a proof for the image we saw earlier about how we can
easily incorporate new languages and features into an editor without many changes.

#+end_notes
* Demo
* Summary
[[file:images/summary.png]]
* Questions?
