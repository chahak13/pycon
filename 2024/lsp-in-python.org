#+title: LSP Demystified - How to write an LSP server in Python
#+author: Chahak Mehta
#+category: Developer Experience

* Duration
30 mins?
* Description
Most of the developers today use IDEs or editors like neovim or emacs with
/IDE-like/ features set up to improve their experience while developing. The
main piece of software/standard that powers this features is the Language Server
Protocol (LSP) and the server implementing the protocol. Understanding how the
server works, for ex. how do we get intelligent autocomplete, provides not only
an understanding of an underlying specification but also important aspects of
the language itself. The goal of this talk is to make a mental model of the
underlying diagnosis happening on the LSP server by working through the steps
required to implement a rudimentary language server.
* Audience
Programmers who are interested in understanding how their editor provides many of
its /magic/ functionalities.
* Level
Intermmediate to advanced.
* Objectives
Attendees will walk away with a better understanding of the LSP specification,
along with how an LSP server provides linting, formatting and autocompletion to
all editors.
* Detailed Abstract
In today's IDE-land, we've often overheard conversations between developers about
new features being added to their editor-of-choice and how editor XYZ is better
than ABC (vim vs emacs vs VSCode vs IntelliJ, we know the drill). This talk
doesn't stoke fire to that debate in any direction (since different things work
for different people). But, a very important tool that often powers most of the
magical features that come with modern software development is the LSP server.
The LSP server often keeps chugging in the background, tirelessly providing the
user with diagnosis regarding the codes, autocompleting variables, and
formatting the codebase to maintain prettiness. While various elements such as
parsing, linting, and formatting have long existed, it is the LSP server that
seamlessly unifies these features in an editor-agnostic manner.

LSP servers are used everywhere, often installed individually by the user even,
but there aren't many resources regarding how to actually build a functional
server that can do more than send /"Hello Editor World!"/ messages to the
editor. This talk aims to fill in that gap to provide a blueprint of steps that
anyone who wants to implement an LSP server in Python can follow. Following this
talk will provide a better understanding of the JSON-RPC protocol used by LSP
servers to communicate with the client, diagnosis that a server can share with
the user and pitfalls that one can fall into while implementing their own
server. It will end with a live demonstration of a toy-LSP server that provides
the basic functionalities to an editor client.
* Outline
+ Intro (2 mins)
+ Why should one care about LSP (2 mins)
  - LSPs form an integral part in our daily working and is a powerful tool.
    Understanding how it works also gives a better idea of how our everyday
    tools like editors work.
+ LSP Specification and JSON-RPC (5 mins)
+ Parsing the code (3 mins)
+ Linting code and determining errors (3 mins)
+ Publishing diagnostics to the client for the user (2 mins)
+ Smart autocompletion (5 mins)
+ Live Demo (or show a working video as backup) (2 mins)
+ Questions (5 mins)

* Additional Notes
** Code for the talk
The talk will be using a rudimentary implementation of a SQL language server
written by the speaker as an example. It is open source and can be found on
[[https://www.github.com/chahak13/sql-lsp][GitHub]]
** Speaking experience
This will be my first time speaking at PyCon (or any similar software
conferences). I have given small talks at the workplace about editors and why
one should try different editors if possible.
